<dec f='codebrowser/Include/tupleobject.h' l='49' type='int _PyTuple_Resize(PyObject ** , Py_ssize_t )'/>
<use f='codebrowser/Objects/abstract.c' l='1852' u='c' c='PySequence_Tuple'/>
<use f='codebrowser/Objects/abstract.c' l='1862' u='c' c='PySequence_Tuple'/>
<def f='codebrowser/Objects/tupleobject.c' l='876' ll='928' type='int _PyTuple_Resize(PyObject ** pv, Py_ssize_t newsize)'/>
<doc f='codebrowser/Objects/tupleobject.c' l='869'>/* The following function breaks the notion that tuples are immutable:
   it changes the size of a tuple.  We get away with this only if there
   is only one module referencing the object.  You can also think of it
   as creating a new tuple object and destroying the old one, only more
   efficiently.  In any case, don&apos;t use this if the tuple may already be
   known to some other part of the code. */</doc>
