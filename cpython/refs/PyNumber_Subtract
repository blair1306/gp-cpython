<dec f='codebrowser/Include/abstract.h' l='621' type='PyObject * PyNumber_Subtract(PyObject * o1, PyObject * o2)'/>
<doc f='codebrowser/Include/abstract.h' l='618'>/* Returns the result of subtracting o2 from o1, or NULL on failure.

   This is the equivalent of the Python expression: o1 - o2. */</doc>
<use f='codebrowser/Modules/_operator.c' l='64' u='c' c='_operator_sub_impl'/>
<use f='codebrowser/Modules/testcapi_long.h' l='156' u='c' c='test_long_api_inner'/>
<use f='codebrowser/Modules/testcapi_long.h' l='156' u='c' c='test_longlong_api_inner'/>
<use f='codebrowser/Modules/_testcapimodule.c' l='538' u='c' c='test_long_and_overflow'/>
<use f='codebrowser/Modules/_testcapimodule.c' l='702' u='c' c='test_long_long_and_overflow'/>
<def f='codebrowser/Objects/abstract.c' l='934' macro='1' type='PyObject * PyNumber_Subtract(PyObject * v, PyObject * w)'/>
<use f='codebrowser/Objects/rangeobject.c' l='186' u='c' c='compute_range_length'/>
<use f='codebrowser/Objects/rangeobject.c' l='189' u='c' c='compute_range_length'/>
<use f='codebrowser/Objects/rangeobject.c' l='367' u='c' c='range_contains_long'/>
<use f='codebrowser/Objects/rangeobject.c' l='547' u='c' c='range_index'/>
<use f='codebrowser/Objects/rangeobject.c' l='895' u='c' c='longrangeiter_len'/>
<use f='codebrowser/Objects/rangeobject.c' l='1162' u='c' c='range_reverse'/>
<use f='codebrowser/Objects/weakrefobject.c' l='497' u='c' c='proxy_sub'/>
<use f='codebrowser/Python/ceval.c' l='1430' u='c' c='_PyEval_EvalFrameDefault'/>
<use f='codebrowser/Python/peephole.c' l='266' u='c' c='fold_binops_on_constants'/>
