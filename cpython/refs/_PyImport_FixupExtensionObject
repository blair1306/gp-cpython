<dec f='codebrowser/Include/import.h' l='107' type='int _PyImport_FixupExtensionObject(PyObject * , PyObject * , PyObject * )'/>
<def f='codebrowser/Python/import.c' l='525' ll='575' type='int _PyImport_FixupExtensionObject(PyObject * mod, PyObject * name, PyObject * filename)'/>
<use f='codebrowser/Python/import.c' l='585' u='c' c='_PyImport_FixupBuiltin'/>
<use f='codebrowser/Python/import.c' l='1083' u='c' c='_imp_create_builtin'/>
<doc f='codebrowser/Python/import.c' l='509'>/* Magic for extension modules (built-in as well as dynamically
   loaded).  To prevent initializing an extension module more than
   once, we keep a static dictionary &apos;extensions&apos; keyed by the tuple
   (module name, module name)  (for built-in modules) or by
   (filename, module name) (for dynamically loaded modules), containing these
   modules.  A copy of the module&apos;s dictionary is stored by calling
   _PyImport_FixupExtensionObject() immediately after the module initialization
   function succeeds.  A copy can be retrieved from there by calling
   _PyImport_FindExtensionObject().

   Modules which do support multiple initialization set their m_size
   field to a non-negative number (indicating the size of the
   module-specific state). They are still recorded in the extensions
   dictionary, to avoid loading shared libraries twice.
*/</doc>
<use f='codebrowser/Python/importdl.c' l='218' u='c' c='_PyImport_LoadDynamicModuleWithSpec'/>
