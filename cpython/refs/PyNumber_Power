<dec f='codebrowser/Include/abstract.h' l='661' type='PyObject * PyNumber_Power(PyObject * o1, PyObject * o2, PyObject * o3)'/>
<doc f='codebrowser/Include/abstract.h' l='657'>/* See the built-in function pow. Returns NULL on failure.

   This is the equivalent of the Python expression: pow(o1, o2, o3),
   where o3 is optional. */</doc>
<use f='codebrowser/Modules/_operator.c' l='652' u='c' c='_operator_pow_impl'/>
<def f='codebrowser/Objects/abstract.c' l='1011' ll='1015' type='PyObject * PyNumber_Power(PyObject * v, PyObject * w, PyObject * z)'/>
<use f='codebrowser/Objects/weakrefobject.c' l='503' u='c' c='proxy_pow'/>
<use f='codebrowser/Python/bltinmodule.c' l='1733' u='c' c='builtin_pow_impl'/>
<use f='codebrowser/Python/ceval.c' l='1324' u='c' c='_PyEval_EvalFrameDefault'/>
<use f='codebrowser/Python/peephole.c' l='248' u='c' c='fold_binops_on_constants'/>
