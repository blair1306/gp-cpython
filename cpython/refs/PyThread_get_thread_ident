<dec f='codebrowser/Include/pythread.h' l='27' type='unsigned long PyThread_get_thread_ident()'/>
<use f='codebrowser/Modules/_io/bufferedio.c' l='277' u='c' c='_enter_buffered_busy'/>
<use f='codebrowser/Modules/_io/bufferedio.c' l='310' u='c' c='buffered_close'/>
<use f='codebrowser/Modules/_io/bufferedio.c' l='310' u='c' c='buffered_close'/>
<use f='codebrowser/Modules/_io/bufferedio.c' l='310' u='c' c='buffered_flush'/>
<use f='codebrowser/Modules/_io/bufferedio.c' l='310' u='c' c='_io__Buffered_peek_impl'/>
<use f='codebrowser/Modules/_io/bufferedio.c' l='310' u='c' c='_io__Buffered_read_impl'/>
<use f='codebrowser/Modules/_io/bufferedio.c' l='310' u='c' c='_io__Buffered_read_impl'/>
<use f='codebrowser/Modules/_io/bufferedio.c' l='310' u='c' c='_io__Buffered_read1_impl'/>
<use f='codebrowser/Modules/_io/bufferedio.c' l='310' u='c' c='_buffered_readinto_generic'/>
<use f='codebrowser/Modules/_io/bufferedio.c' l='310' u='c' c='_buffered_readline'/>
<use f='codebrowser/Modules/_io/bufferedio.c' l='310' u='c' c='_io__Buffered_seek_impl'/>
<use f='codebrowser/Modules/_io/bufferedio.c' l='310' u='c' c='_io__Buffered_truncate_impl'/>
<use f='codebrowser/Modules/_io/bufferedio.c' l='310' u='c' c='_io_BufferedWriter_write_impl'/>
<use f='codebrowser/Modules/_multiprocessing/semaphore.c' l='24' u='c' c='semlock_acquire'/>
<use f='codebrowser/Modules/_multiprocessing/semaphore.c' l='332' u='c' c='semlock_acquire'/>
<use f='codebrowser/Modules/_multiprocessing/semaphore.c' l='24' u='c' c='semlock_release'/>
<use f='codebrowser/Modules/_multiprocessing/semaphore.c' l='24' u='c' c='semlock_ismine'/>
<use f='codebrowser/Modules/_ssl.c' l='5040' u='c' c='_ssl_threadid_callback'/>
<use f='codebrowser/Modules/_threadmodule.c' l='302' u='c' c='rlock_acquire'/>
<use f='codebrowser/Modules/_threadmodule.c' l='345' u='c' c='rlock_release'/>
<use f='codebrowser/Modules/_threadmodule.c' l='430' u='c' c='rlock_is_owned'/>
<use f='codebrowser/Modules/_threadmodule.c' l='993' u='c' c='t_bootstrap'/>
<use f='codebrowser/Modules/_threadmodule.c' l='1140' u='c' c='thread_get_ident'/>
<use f='codebrowser/Modules/signalmodule.c' l='443' u='c' c='signal_signal_impl'/>
<use f='codebrowser/Modules/signalmodule.c' l='575' u='c' c='signal_set_wakeup_fd'/>
<use f='codebrowser/Modules/signalmodule.c' l='1221' u='c' c='PyInit__signal'/>
<use f='codebrowser/Modules/signalmodule.c' l='1527' u='c' c='PyErr_CheckSignals'/>
<use f='codebrowser/Modules/signalmodule.c' l='1603' u='c' c='PyOS_InterruptOccurred'/>
<use f='codebrowser/Modules/signalmodule.c' l='1632' u='c' c='_PySignal_AfterFork'/>
<use f='codebrowser/Modules/signalmodule.c' l='1641' u='c' c='_PyOS_IsMainThread'/>
<use f='codebrowser/Python/ceval.c' l='181' u='c' c='PyEval_InitThreads'/>
<use f='codebrowser/Python/ceval.c' l='253' u='c' c='PyEval_ReInitThreads'/>
<use f='codebrowser/Python/ceval.c' l='416' u='c' c='Py_MakePendingCalls'/>
<use f='codebrowser/Python/import.c' l='156' u='c' c='_PyImport_AcquireLock'/>
<use f='codebrowser/Python/import.c' l='183' u='c' c='_PyImport_ReleaseLock'/>
<use f='codebrowser/Python/import.c' l='213' u='c' c='_PyImport_ReInitLock'/>
<use f='codebrowser/Python/pystate.c' l='258' u='c' c='new_threadstate'/>
<def f='codebrowser/Python/thread_pthread.h' l='252' ll='260' type='unsigned long PyThread_get_thread_ident()'/>
<doc f='codebrowser/Python/thread_pthread.h' l='246'>/* XXX This implementation is considered (to quote Tim Peters) &quot;inherently
   hosed&quot; because:
     - It does not guarantee the promise that a non-zero integer is returned.
     - The cast to unsigned long is inherently unsafe.
     - It is not clear that the &apos;volatile&apos; (for AIX?) are any longer necessary.
*/</doc>
