<dec f='codebrowser/Include/code.h' l='141' type='PyObject * PyCode_Optimize(PyObject * code, PyObject * consts, PyObject * names, PyObject * lnotab)'/>
<use f='codebrowser/Python/compile.c' l='5328' u='c' c='makecode'/>
<def f='codebrowser/Python/peephole.c' l='424' ll='785' type='PyObject * PyCode_Optimize(PyObject * code, PyObject * consts, PyObject * names, PyObject * lnotab_obj)'/>
<doc f='codebrowser/Python/peephole.c' l='411'>/* Perform basic peephole optimizations to components of a code object.
   The consts object should still be in list form to allow new constants
   to be appended.

   To keep the optimizer simple, it bails when the lineno table has complex
   encoding for gaps &gt;= 255.

   Optimizations are restricted to simple transformations occurring within a
   single basic block.  All transformations keep the code size the same or
   smaller.  For those that reduce size, the gaps are initially filled with
   NOPs.  Later those NOPs are removed and the jump addresses retargeted in
   a single pass. */</doc>
