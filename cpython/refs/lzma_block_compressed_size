<dec f='include/lzma/block.h' l='375' type='lzma_ret lzma_block_compressed_size(lzma_block * block, lzma_vli unpadded_size)'/>
<doc f='include/lzma/block.h' l='348'>/**
 * \brief       Validate and set Compressed Size according to Unpadded Size
 *
 * Block Header stores Compressed Size, but Index has Unpadded Size. If the
 * application has already parsed the Index and is now decoding Blocks,
 * it can calculate Compressed Size from Unpadded Size. This function does
 * exactly that with error checking:
 *
 *  - Compressed Size calculated from Unpadded Size must be positive integer,
 *    that is, Unpadded Size must be big enough that after Block Header and
 *    Check fields there&apos;s still at least one byte for Compressed Size.
 *
 *  - If Compressed Size was present in Block Header, the new value
 *    calculated from Unpadded Size is compared against the value
 *    from Block Header.
 *
 * \note        This function must be called _after_ decoding the Block Header
 *              field so that it can properly validate Compressed Size if it
 *              was present in Block Header.
 *
 * \return      - LZMA_OK: block-&gt;compressed_size was set successfully.
 *              - LZMA_DATA_ERROR: unpadded_size is too small compared to
 *                block-&gt;header_size and lzma_check_size(block-&gt;check).
 *              - LZMA_PROG_ERROR: Some values are invalid. For example,
 *                block-&gt;header_size must be a multiple of four and
 *                between 8 and 1024 inclusive.
 */</doc>
