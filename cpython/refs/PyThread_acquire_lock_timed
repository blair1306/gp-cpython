<dec f='codebrowser/Include/pythread.h' l='67' type='PyLockStatus PyThread_acquire_lock_timed(PyThread_type_lock , long long microseconds, int intr_flag)'/>
<doc f='codebrowser/Include/pythread.h' l='55'>/* If microseconds == 0, the call is non-blocking: it returns immediately
   even when the lock can&apos;t be acquired.
   If microseconds &gt; 0, the call waits up to the specified duration.
   If microseconds &lt; 0, the call waits until success (or abnormal failure)

   microseconds must be less than PY_TIMEOUT_MAX. Behaviour otherwise is
   undefined.

   If intr_flag is true and the acquire is interrupted by a signal, then the
   call will return PY_LOCK_INTR.  The caller may reattempt to acquire the
   lock.
*/</doc>
<use f='codebrowser/Modules/_io/bufferedio.c' l='293' u='c' c='_enter_buffered_busy'/>
<use f='codebrowser/Modules/_threadmodule.c' l='65' u='c' c='acquire_timed'/>
<use f='codebrowser/Modules/_threadmodule.c' l='68' u='c' c='acquire_timed'/>
<use f='codebrowser/Modules/faulthandler.c' l='558' u='c' c='faulthandler_thread'/>
<def f='codebrowser/Python/thread_pthread.h' l='333' ll='385' type='PyLockStatus PyThread_acquire_lock_timed(PyThread_type_lock lock, long long microseconds, int intr_flag)'/>
<use f='codebrowser/Python/thread_pthread.h' l='563' u='c' c='PyThread_acquire_lock'/>
