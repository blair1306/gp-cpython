<dec f='codebrowser/Include/fileutils.h' l='76' type='Py_ssize_t _Py_read(int fd, void * buf, size_t count)'/>
<use f='codebrowser/Modules/_io/fileio.c' l='633' u='c' c='_io_FileIO_readinto_impl'/>
<use f='codebrowser/Modules/_io/fileio.c' l='734' u='c' c='_io_FileIO_readall_impl'/>
<use f='codebrowser/Modules/_io/fileio.c' l='801' u='c' c='_io_FileIO_read_impl'/>
<use f='codebrowser/Modules/ossaudiodev.c' l='418' u='c' c='oss_read'/>
<use f='codebrowser/Modules/posixmodule.c' l='8018' u='c' c='os_read_impl'/>
<use f='codebrowser/Python/bootstrap_hash.c' l='349' u='c' c='dev_urandom'/>
<def f='codebrowser/Python/fileutils.c' l='1173' ll='1233' type='Py_ssize_t _Py_read(int fd, void * buf, size_t count)'/>
<doc f='codebrowser/Python/fileutils.c' l='1160'>/* Read count bytes from fd into buf.

   On success, return the number of read bytes, it can be lower than count.
   If the current file offset is at or past the end of file, no bytes are read,
   and read() returns zero.

   On error, raise an exception, set errno and return -1.

   When interrupted by a signal (read() fails with EINTR), retry the syscall.
   If the Python signal handler raises an exception, the function returns -1
   (the syscall is not retried).

   Release the GIL to call read(). The caller must hold the GIL. */</doc>
