<dec f='codebrowser/Include/fileutils.h' l='9' type='wchar_t * Py_DecodeLocale(const char * arg, size_t * size)'/>
<use f='codebrowser/Modules/getpath.c' l='339' u='c' c='search_for_prefix'/>
<use f='codebrowser/Modules/getpath.c' l='494' u='c' c='calculate_path'/>
<use f='codebrowser/Modules/getpath.c' l='495' u='c' c='calculate_path'/>
<use f='codebrowser/Modules/getpath.c' l='496' u='c' c='calculate_path'/>
<use f='codebrowser/Modules/getpath.c' l='497' u='c' c='calculate_path'/>
<use f='codebrowser/Modules/getpath.c' l='506' u='c' c='calculate_path'/>
<use f='codebrowser/Modules/getpath.c' l='712' u='c' c='calculate_path'/>
<use f='codebrowser/Modules/readline.c' l='1060' u='c' c='flex_complete'/>
<use f='codebrowser/Modules/readline.c' l='1068' u='c' c='flex_complete'/>
<use f='codebrowser/Objects/unicodeobject.c' l='3496' u='c' c='PyUnicode_EncodeLocale'/>
<use f='codebrowser/Objects/unicodeobject.c' l='3741' u='c' c='PyUnicode_DecodeLocaleAndSize'/>
<use f='codebrowser/Objects/unicodeobject.c' l='3791' u='c' c='PyUnicode_DecodeLocaleAndSize'/>
<use f='codebrowser/Programs/python.c' l='87' u='c' c='main'/>
<def f='codebrowser/Python/fileutils.c' l='273' ll='410' type='wchar_t * Py_DecodeLocale(const char * arg, size_t * size)'/>
<use f='codebrowser/Python/fileutils.c' l='1374' u='c' c='_Py_wreadlink'/>
<use f='codebrowser/Python/fileutils.c' l='1415' u='c' c='_Py_wrealpath'/>
<use f='codebrowser/Python/fileutils.c' l='1448' u='c' c='_Py_wgetcwd'/>
<doc f='codebrowser/Python/fileutils.c' l='254'>/* Decode a byte string from the locale encoding with the
   surrogateescape error handler: undecodable bytes are decoded as characters
   in range U+DC80..U+DCFF. If a byte sequence can be decoded as a surrogate
   character, escape the bytes using the surrogateescape error handler instead
   of decoding them.

   Return a pointer to a newly allocated wide character string, use
   PyMem_RawFree() to free the memory. If size is not NULL, write the number of
   wide characters excluding the null character into *size

   Return NULL on decoding error or memory allocation error. If *size* is not
   NULL, *size is set to (size_t)-1 on memory error or set to (size_t)-2 on
   decoding error.

   Decoding errors should never happen, unless there is a bug in the C
   library.

   Use the Py_EncodeLocale() function to encode the character string back to a
   byte string. */</doc>
<use f='codebrowser/Python/frozenmain.c' l='57' u='c' c='Py_FrozenMain'/>
