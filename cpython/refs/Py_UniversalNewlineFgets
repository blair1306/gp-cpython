<dec f='codebrowser/Include/fileobject.h' l='19' type='char * Py_UniversalNewlineFgets(char * , int , FILE * , PyObject * )'/>
<def f='codebrowser/Objects/fileobject.c' l='234' ll='299' type='char * Py_UniversalNewlineFgets(char * buf, int n, FILE * stream, PyObject * fobj)'/>
<doc f='codebrowser/Objects/fileobject.c' l='220'>/*
** Py_UniversalNewlineFgets is an fgets variation that understands
** all of \r, \n and \r\n conventions.
** The stream should be opened in binary mode.
** If fobj is NULL the routine always does newline conversion, and
** it may peek one char ahead to gobble the second char in \r\n.
** If fobj is non-NULL it must be a PyFileObject. In this case there
** is no readahead but in stead a flag is used to skip a following
** \n on the next read. Also, if the file is open in binary mode
** the whole conversion is skipped. Finally, the routine keeps track of
** the different types of newlines seen.
** Note that we need no error handling: fgets() treats error and eof
** identically.
*/</doc>
<use f='codebrowser/Parser/tokenizer.c' l='604' u='c' c='decoding_fgets'/>
<use f='codebrowser/Python/errors.c' l='1117' u='c' c='err_programtext'/>
